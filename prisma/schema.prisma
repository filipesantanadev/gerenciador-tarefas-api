// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password_hash String
  role          UserRole @default(USER)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relacionamentos
  tasks      Task[]
  categories Category[]
  comments   Comment[]

  @@map("users")
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String  @default("#3B82F6") // hex color
  icon        String? // nome do ícone (ex: "folder", "star")
  is_default  Boolean @default(false)

  // Relacionamentos
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tasks   Task[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, name]) // Usuário não pode ter categorias com mesmo nome
  @@map("categories")
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  priority     Priority   @default(MEDIUM)
  due_date     DateTime?
  completed_at DateTime?
  is_archived  Boolean    @default(false)

  // Relacionamentos
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category_id String?
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  tags        Tag[]
  comments    Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("tasks")
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  color String @default("#6B7280") // hex color

  // Relacionamentos (many-to-many)
  tasks Task[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("tags")
}

model Comment {
  id      String @id @default(uuid())
  content String

  // Relacionamentos
  task_id String
  task    Task   @relation(fields: [task_id], references: [id], onDelete: Cascade)
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("comments")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
